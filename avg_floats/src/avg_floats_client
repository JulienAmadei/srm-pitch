#!/usr/bin/env python3

## Simple rospy service client that calls a service to average
## five floats. 

PKG = 'avg_floats' # this package name

import roslib; roslib.load_manifest(PKG) 

import sys
import os
import rospy

# Imports the AvgFloats service 
from avg_floats.srv import *
from std_msgs.msg import  String, Float64

## Average five floats using the average_five_floats service
## @param x int: first number to add
## @param y int: second number to add
# creating an empty list

def average_five_floats_client(n):

    # NOTE: you don't have to call rospy.init_node() to make calls against
    # a service. This is because service clients do not have to be
    # nodes.

    # Block until the service is available
    rospy.wait_for_service('avg_five_floats')
    
    lst = []   
    # iterating till the range
    for i in range(0, n):
        ele = int(input())
    
        lst.append(ele) # adding the element

    try:
        # Create a handle to the service
        avg_five_floats = rospy.ServiceProxy('avg_five_floats', AvgFloats)
        
        print("Requesting the average of (%f)" % (lst))
        
        resp = avg_five_floats.call(AvgFloatsRequest(lst))

        if not resp.avg == sum(lst)/len(lst):
            raise Exception("Test failure, returned avg was %f"%resp.avg)
        
        return resp.avg

    except rospy.ServiceException as e:
        print("Service call failed: %f"%e)

def talker(avg_float):
    # Node is publishing to the messages topic using the message type String.
    # Queue size prevents from displaying too many messages if any subscriber is not receiving them fast enough.
    pub = rospy.Publisher('average', Float64, queue_size = 10) 
    
    # Tells rospy the name of the node -- until rospy has this information, it cannot start communicating with the ROS Master.
    # anonymous = True ensures that the node has a unique name by adding random numbers to the end of it.
    rospy.init_node('talker', anonymous=True)

    # This line creates a Rate object rate. 
    # Offers a convenient way for looping at the desired rate. 
    # With an argument of 10, we will go through the loop 10 times per second.
    rate = rospy.Rate(10) # 10hz

    # Checking the rospy.is_shutdown() flag and then looping. 
    # We check is_shutdown() to see if we should exit.  
    while not rospy.is_shutdown():
        # Publishes a string to our messages topic
        pub.publish(avg_float)

if __name__ == "__main__":
    argv = rospy.myargv()

    if len(argv) != 6:
        print("Please input 5 floats.")
    else:     
        a = float(argv[1])
        b = float(argv[2])
        c = float(argv[3])
        d = float(argv[4])
        e = float(argv[5])
        avg_floats = average_five_floats_client(a, b, c, d, e)
        print(f"The average is {avg_floats}")
        talker(avg_floats)
        sys.exit(1)
